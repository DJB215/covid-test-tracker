"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserMultiFormatReaderInverse = void 0;
var BrowserCodeReader_1 = require("./BrowserCodeReader");
var MultiFormatReader_1 = require("../core/MultiFormatReader");
var BinaryBitmap_1 = require("../core/BinaryBitmap");
var HTMLCanvasElementLuminanceSource_1 = require("./HTMLCanvasElementLuminanceSource");
var HybridBinarizer_1 = require("../core/common/HybridBinarizer");
var BrowserMultiFormatReaderInverse = /** @class */ (function (_super) {
    __extends(BrowserMultiFormatReaderInverse, _super);
    function BrowserMultiFormatReaderInverse(hints, timeBetweenScansMillis) {
        if (hints === void 0) { hints = null; }
        if (timeBetweenScansMillis === void 0) { timeBetweenScansMillis = 500; }
        var _this = this;
        var reader = new MultiFormatReader_1.default();
        reader.setHints(hints);
        _this = _super.call(this, reader, timeBetweenScansMillis) || this;
        return _this;
    }
    /**
     * Overwrite createBinaryBitmap to inverse the image before scanning
     * Used for data matrix with black background
     */
    BrowserMultiFormatReaderInverse.prototype.createBinaryBitmap = function (mediaElement) {
        var ctx = this.getCaptureCanvasContext(mediaElement);
        this.drawImageOnCanvas(ctx, mediaElement);
        var canvas = this.getCaptureCanvas(mediaElement);
        var luminanceSource = new HTMLCanvasElementLuminanceSource_1.HTMLCanvasElementLuminanceSource(canvas);
        var invertedLuminance = luminanceSource.invert();
        var hybridBinarizer = new HybridBinarizer_1.default(invertedLuminance);
        return new BinaryBitmap_1.default(hybridBinarizer);
    };
    return BrowserMultiFormatReaderInverse;
}(BrowserCodeReader_1.BrowserCodeReader));
exports.BrowserMultiFormatReaderInverse = BrowserMultiFormatReaderInverse;
//# sourceMappingURL=BrowserMultiFormatReaderInverse.js.map