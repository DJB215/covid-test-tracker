{"ast":null,"code":"var _jsxFileName = \"/Users/darrellbullock/Documents/ReactJS/quidell-tracker/client/src/components/Login.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom'; //import axios from 'axios';\n\nimport LoginForm from './LoginForm';\nimport VerifyForm from './VerifyForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  const [activeStep, setActiveStep] = useState(0);\n  const [loginId, setLoginId] = useState('');\n  const [verifyCode, setVerifyCode] = useState(0);\n  const [inputCode, setInputCode] = useState(0);\n  const history = useHistory();\n  const steps = ['Einstein Login ID', 'Verification Code'];\n\n  const handleNextLogin = e => {\n    e.preventDefault();\n    setLoginId(document.getElementById('EinsteinId').value);\n    setActiveStep(activeStep + 1);\n  };\n\n  const handleNextVerify = e => {\n    e.preventDefault();\n    let newVerifyCode = document.getElementById('secretCode').value;\n    let newRandomCode = document.getElementById('randomCode').value;\n    setVerifyCode(newRandomCode);\n    setInputCode(newVerifyCode);\n    console.log('Codes: ', verifyCode, inputCode);\n    console.log('From next verify: ', values);\n    history.push({\n      pathname: '/scanner',\n      state: {\n        loginId: values.loginId\n      }\n    });\n  };\n\n  const handleBack = e => {\n    setActiveStep(activeStep - 1);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(e.target.value, loginId);\n  };\n\n  const handleChange = input => e => {\n    //console.log(document.getElementById('loginId').value);\n    console.log(input); //console.log(e.target.name)\n    // if (e.target.name === 'loginId') {\n    //     console.log(e)\n    //     //setLoginId(e.target.value)\n    //     //console.log(e.target.value);\n    // } else {\n    //     setVerifyCode(e.target.value)\n    // }\n  };\n\n  const values = {\n    loginId,\n    verifyCode,\n    inputCode\n  };\n\n  switch (activeStep) {\n    case 0:\n      return /*#__PURE__*/_jsxDEV(LoginForm, {\n        handleChange: handleChange,\n        values: values,\n        handleNext: handleNextLogin,\n        steps: steps,\n        activeStep: activeStep,\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this);\n\n    case 1:\n      return /*#__PURE__*/_jsxDEV(VerifyForm, {\n        handleChange: handleChange,\n        values: values,\n        handleBack: handleBack,\n        handleNext: handleNextVerify,\n        steps: steps,\n        activeStep: activeStep\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this);\n\n    default:\n      throw new Error('Unknown step');\n  }\n};\n\n_s(Login, \"WAMot5bXbyvqe3vz0mnDGP78lrY=\", false, function () {\n  return [useHistory];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/darrellbullock/Documents/ReactJS/quidell-tracker/client/src/components/Login.jsx"],"names":["React","useState","useHistory","LoginForm","VerifyForm","Login","activeStep","setActiveStep","loginId","setLoginId","verifyCode","setVerifyCode","inputCode","setInputCode","history","steps","handleNextLogin","e","preventDefault","document","getElementById","value","handleNextVerify","newVerifyCode","newRandomCode","console","log","values","push","pathname","state","handleBack","handleSubmit","target","handleChange","input","Error"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n//import axios from 'axios';\nimport LoginForm from './LoginForm';\nimport VerifyForm from './VerifyForm';\n\nconst Login = () => {\n    const [activeStep, setActiveStep] = useState(0);\n    const [loginId, setLoginId] = useState('');\n    const [verifyCode, setVerifyCode] = useState(0);\n    const [inputCode, setInputCode] = useState(0)\n\n    const history = useHistory();\n\n    const steps = ['Einstein Login ID', 'Verification Code'];\n\n    const handleNextLogin = (e) => {\n        e.preventDefault();\n        setLoginId(document.getElementById('EinsteinId').value);\n        setActiveStep(activeStep + 1 );\n    }\n\n    const handleNextVerify = (e) => {\n        e.preventDefault();\n        let newVerifyCode = document.getElementById('secretCode').value\n        let newRandomCode = document.getElementById('randomCode').value\n\n        setVerifyCode(newRandomCode);\n        setInputCode(newVerifyCode);\n        \n        console.log('Codes: ', verifyCode, inputCode)\n        console.log('From next verify: ', values);\n        history.push({\n            pathname: '/scanner',\n            state: { loginId: values.loginId }\n        });\n    }\n\n    const handleBack = (e) => {\n        setActiveStep(activeStep - 1 );\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(e.target.value, loginId)\n    }\n\n    const handleChange = input => e => {\n        //console.log(document.getElementById('loginId').value);\n        console.log(input)\n        //console.log(e.target.name)\n        // if (e.target.name === 'loginId') {\n        //     console.log(e)\n        //     //setLoginId(e.target.value)\n        //     //console.log(e.target.value);\n        // } else {\n        //     setVerifyCode(e.target.value)\n        // }\n    }\n\n    const values = { loginId, verifyCode, inputCode }\n\n    switch (activeStep) {\n        case 0:\n            return (\n                <LoginForm\n                    handleChange={handleChange}\n                    values={values}\n                    handleNext={handleNextLogin}\n                    steps={steps}\n                    activeStep={activeStep}\n                    handleSubmit={handleSubmit}\n                />\n            );\n        case 1:\n            return (\n                <VerifyForm\n                    handleChange={handleChange}\n                    values={values}\n                    handleBack={handleBack}\n                    handleNext={handleNextVerify}\n                    steps={steps}\n                    activeStep={activeStep}\n                />\n            );\n        default:\n            throw new Error('Unknown step');\n    }\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}