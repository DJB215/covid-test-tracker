{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = __importDefault(require(\"react\"));\n\nconst zxing_library2_1 = require(\"zxing-library2\");\n\nconst react_webcam_1 = __importDefault(require(\"react-webcam\"));\n\nconst BarcodeScannerComponent = ({\n  width,\n  height,\n  onUpdate,\n  inverse\n}) => {\n  const webcamRef = react_1.default.useRef(null);\n  const codeReader = new zxing_library2_1.BrowserMultiFormatReader();\n  const InverseCodeReader = new zxing_library2_1.BrowserMultiFormatReaderInverse();\n  const capture = react_1.default.useCallback(() => {\n    var _a;\n\n    const imageSrc = (_a = webcamRef === null || webcamRef === void 0 ? void 0 : webcamRef.current) === null || _a === void 0 ? void 0 : _a.getScreenshot();\n\n    if (imageSrc) {\n      if (!inverse) {\n        codeReader.decodeFromImage(undefined, imageSrc).then(result => {\n          onUpdate(null, result);\n        }).catch(err => {\n          onUpdate(err);\n        });\n      } else {\n        InverseCodeReader.decodeFromImage(undefined, imageSrc).then(result => {\n          onUpdate(null, result);\n        }).catch(err => {\n          onUpdate(err);\n        });\n      }\n    }\n  }, [codeReader, onUpdate]);\n  react_1.default.useEffect(() => {\n    setInterval(capture, 100);\n  }, []);\n  return react_1.default.createElement(react_webcam_1.default, {\n    audio: false,\n    width: width,\n    height: height,\n    ref: webcamRef,\n    screenshotFormat: \"image/jpeg\"\n  });\n};\n\nexports.default = BarcodeScannerComponent;","map":{"version":3,"sources":["/Users/darrellbullock/Documents/ReactJS/quidell-tracker/client/node_modules/react-webcam-barcode-scanner2/dist/BarcodeScannerComponent.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_1","require","zxing_library2_1","react_webcam_1","BarcodeScannerComponent","width","height","onUpdate","inverse","webcamRef","default","useRef","codeReader","BrowserMultiFormatReader","InverseCodeReader","BrowserMultiFormatReaderInverse","capture","useCallback","_a","imageSrc","current","getScreenshot","decodeFromImage","undefined","then","result","catch","err","useEffect","setInterval","createElement","audio","ref","screenshotFormat"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,OAAO,GAAGP,eAAe,CAACQ,OAAO,CAAC,OAAD,CAAR,CAA/B;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,gBAAD,CAAhC;;AACA,MAAME,cAAc,GAAGV,eAAe,CAACQ,OAAO,CAAC,cAAD,CAAR,CAAtC;;AACA,MAAMG,uBAAuB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,MAAT;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA;AAA3B,CAAD,KAA0C;AACtE,QAAMC,SAAS,GAAGT,OAAO,CAACU,OAAR,CAAgBC,MAAhB,CAAuB,IAAvB,CAAlB;AACA,QAAMC,UAAU,GAAG,IAAIV,gBAAgB,CAACW,wBAArB,EAAnB;AACA,QAAMC,iBAAiB,GAAG,IAAIZ,gBAAgB,CAACa,+BAArB,EAA1B;AACA,QAAMC,OAAO,GAAGhB,OAAO,CAACU,OAAR,CAAgBO,WAAhB,CAA4B,MAAM;AAC9C,QAAIC,EAAJ;;AACA,UAAMC,QAAQ,GAAG,CAACD,EAAE,GAAGT,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACW,OAAtE,MAAmF,IAAnF,IAA2FF,EAAE,KAAK,KAAK,CAAvG,GAA2G,KAAK,CAAhH,GAAoHA,EAAE,CAACG,aAAH,EAArI;;AACA,QAAIF,QAAJ,EAAc;AACV,UAAI,CAACX,OAAL,EAAc;AACVI,QAAAA,UAAU,CAACU,eAAX,CAA2BC,SAA3B,EAAsCJ,QAAtC,EAAgDK,IAAhD,CAAsDC,MAAD,IAAY;AAC7DlB,UAAAA,QAAQ,CAAC,IAAD,EAAOkB,MAAP,CAAR;AACH,SAFD,EAEGC,KAFH,CAEUC,GAAD,IAAS;AACdpB,UAAAA,QAAQ,CAACoB,GAAD,CAAR;AACH,SAJD;AAKH,OAND,MAOK;AACDb,QAAAA,iBAAiB,CAACQ,eAAlB,CAAkCC,SAAlC,EAA6CJ,QAA7C,EAAuDK,IAAvD,CAA6DC,MAAD,IAAY;AACpElB,UAAAA,QAAQ,CAAC,IAAD,EAAOkB,MAAP,CAAR;AACH,SAFD,EAEGC,KAFH,CAEUC,GAAD,IAAS;AACdpB,UAAAA,QAAQ,CAACoB,GAAD,CAAR;AACH,SAJD;AAKH;AACJ;AACJ,GAnBe,EAmBb,CAACf,UAAD,EAAaL,QAAb,CAnBa,CAAhB;AAoBAP,EAAAA,OAAO,CAACU,OAAR,CAAgBkB,SAAhB,CAA0B,MAAM;AAC5BC,IAAAA,WAAW,CAACb,OAAD,EAAU,GAAV,CAAX;AACH,GAFD,EAEG,EAFH;AAGA,SAAQhB,OAAO,CAACU,OAAR,CAAgBoB,aAAhB,CAA8B3B,cAAc,CAACO,OAA7C,EAAsD;AAAEqB,IAAAA,KAAK,EAAE,KAAT;AAAgB1B,IAAAA,KAAK,EAAEA,KAAvB;AAA8BC,IAAAA,MAAM,EAAEA,MAAtC;AAA8C0B,IAAAA,GAAG,EAAEvB,SAAnD;AAA8DwB,IAAAA,gBAAgB,EAAE;AAAhF,GAAtD,CAAR;AACH,CA5BD;;AA6BAnC,OAAO,CAACY,OAAR,GAAkBN,uBAAlB","sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst react_1 = __importDefault(require(\"react\"));\r\nconst zxing_library2_1 = require(\"zxing-library2\");\r\nconst react_webcam_1 = __importDefault(require(\"react-webcam\"));\r\nconst BarcodeScannerComponent = ({ width, height, onUpdate, inverse }) => {\r\n    const webcamRef = react_1.default.useRef(null);\r\n    const codeReader = new zxing_library2_1.BrowserMultiFormatReader();\r\n    const InverseCodeReader = new zxing_library2_1.BrowserMultiFormatReaderInverse();\r\n    const capture = react_1.default.useCallback(() => {\r\n        var _a;\r\n        const imageSrc = (_a = webcamRef === null || webcamRef === void 0 ? void 0 : webcamRef.current) === null || _a === void 0 ? void 0 : _a.getScreenshot();\r\n        if (imageSrc) {\r\n            if (!inverse) {\r\n                codeReader.decodeFromImage(undefined, imageSrc).then((result) => {\r\n                    onUpdate(null, result);\r\n                }).catch((err) => {\r\n                    onUpdate(err);\r\n                });\r\n            }\r\n            else {\r\n                InverseCodeReader.decodeFromImage(undefined, imageSrc).then((result) => {\r\n                    onUpdate(null, result);\r\n                }).catch((err) => {\r\n                    onUpdate(err);\r\n                });\r\n            }\r\n        }\r\n    }, [codeReader, onUpdate]);\r\n    react_1.default.useEffect(() => {\r\n        setInterval(capture, 100);\r\n    }, []);\r\n    return (react_1.default.createElement(react_webcam_1.default, { audio: false, width: width, height: height, ref: webcamRef, screenshotFormat: \"image/jpeg\" }));\r\n};\r\nexports.default = BarcodeScannerComponent;\r\n"]},"metadata":{},"sourceType":"script"}